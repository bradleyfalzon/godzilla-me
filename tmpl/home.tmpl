{{ template "header" . }}

<style>
* { box-sizing: border-box; }

.splash {
    color: #EBF5FB;
    text-shadow: 1px 1px #333;
    padding: 20px;
    background: #283344;
}

.splash h1 {
    text-align: center;
    letter-spacing: 4px;
}

.splash .logo-col {
    padding-right: 50px;
    text-align: right;
}
.splash .form-col {
    padding-left: 50px;
}
.splash p {
    text-align: justify;
    line-height: 1.6em;
}

#pkg { color: #283344; width: 60%; }
#submitPkgBtn { background: #bce5fb; padding: 0.5em 1.5em; }

.content { background: white; padding: 20px;}
.content .readme { margin: 0 auto; max-width: 800px }

</style>

<div class="splash">
    <h1>Godzilla is a mutation testing tool for Go.</h1>
    <div class="pure-g">
        <div class="logo-col pure-u-1-2">
            <img src="/static/godzilla-trans.png" width="256" style="max-width:100%;">
        </div>
        <div class="form-col pure-u-1-2">
            <p>Mutation testing evaluates the quality of the existing tests in a package, by modifying the already tested
            code in a subtle way, it produces a mutatant, the existing tests are ran and are expected to fail (due to the
            mutation), if the tests pass, it shows the tests were not satisfactory.</p>
            <p>Godzilla automates this process for you, with its own set of mutations. Do note however, some false positives
            are possible, so read through the results, decide for yourself whether the mutation correctly discovered
            an opportunity to improve your tests.</p>
            <form action="/submit" method="post" class="pure-form">
                <input id="pkg" type="text" name="pkg" value="github.com/" title="go get-able path" placeholder="github.com/user/package" required/>
                <button id="submitPkgBtn" type="submit" class="pure-button">Go</button>
            </form>
        </div>
    </div>
</div>

<div class="content">
    <div class="readme">
        <h2>README.md</h2>
    </div>
</div>


<script>
// attempt to use javascript to submit the form and refresh only once the
// results are ready.
document.getElementById("submitPkgBtn").addEventListener("click", function(e) {
    e.preventDefault();
    var r = new XMLHttpRequest();
    r.addEventListener("load", submitLoad);
    r.open("POST", "/submit");
    r.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    r.send("pkg="+encodeURIComponent(pkgName()));
});

// pkgName returns the name of the package being tested
function pkgName() {
    return document.getElementById('pkg').value;
}

// submitLoad checks submit status and begins the getStatus loop
function submitLoad() {
    console.log(this);
    if (parseInt(this.status/100) > 3) {
        alert("error from server when submitting form: " + this.status + " " + this.statusText);
        return;
    }
    window.setTimeout(getStatus, refreshInterval)
}

// getStatus gets the package's status from the API
function getStatus() {
    var r = new XMLHttpRequest();
    r.addEventListener("load", statusLoad);
    r.open("GET", "/api/status/"+encodeURIComponent(pkgName()));
    r.send();
}

var refreshCount = 100
var refreshInterval = 2000 // milliseconds

// statusLoad handles the result from the status API
function statusLoad() {
    var resp = JSON.parse(this.responseText);
    if ( resp.Finished ) {
        window.location.href = resp.HTMLURL
        return
    }
    if ( refreshCount > 0 ) {
        window.refreshCount--
        window.setTimeout(getStatus, refreshInterval)
        return
    }
    alert("Took too long, giving up auto refreshing, please manually refresh to try again or retry later.")
}
</script>

{{ template "footer" . }}
